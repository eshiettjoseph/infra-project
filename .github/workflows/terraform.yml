on:
  push:
    branches:
      - main
    pull_request:

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      
  
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      ecr: ${{ steps.changes.outputs.ecr }}
      infra: ${{ steps.changes.outputs.infra }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'terraform/backend/**'
          ecr:
            - 'terraform/ecr/**'
          infra:
            - 'terraform/infrastructure/**'    

  
  ecr:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ needs.changes.outputs.ecr == 'true' }}
    defaults:
      run:
        working-directory: terraform/ecr
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_API_KEY }}
      - uses: actions/checkout@v3
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      # - name: Setup terraform variables
      #   id: vars
      #   run: |-
      #     cat > ecr.tfvars <<EOF
      #     ecr_repo_name="${{ vars.REPO_NAME }}" 
      #     EOF
        

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # - name: Terraform Plan
      #   id: plan
      #   if: github.event_name == 'pull_request'
      #   run: terraform plan -no-color -input=false
      #   continue-on-error: true

      # - name: Update Pull Request
      #   uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: ${{ steps.plan.outputs.stdout }}
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`terraform\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false